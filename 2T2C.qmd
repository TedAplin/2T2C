---
Y---
title: "2T2C"
author: "Ted Aplin"
format: html
editor: visual
---

# Initialisation

Make sure you have run Initialisation.R before using this file for the first time, if any packages fail to load, then run it again.

```{r}
#| label: Packages
# loading packages
library(tidyverse)
library(here)
library(png)
library(svglite)
# library(doParallel)
# closeAllConnections()
# registerDoParallel(cores=16)

# loading personal functions
source(here("Functions", "Functions for 2T2C.R"))
```

# Data preparation

## loading

Place your data into the "Input" folder then enter in the following details here, a demo from the test data-set is here by default. **If there is any information you would not like to enter, write 0.**

-   File name including extension (.csv)

-   The time interval between frames in Seconds

-   The number of the channel that contains the calcium data

-   The number of the channel that contains the background data

-   the names you would like to give to your sensors

-   the names you would like to give your ROIs

```{r}
#| label: Data loading and manual data input
# Input file name in the format "file name.csv" MUST BE ENTERED
FileName <- "MAX_CNGC 5 2158-6 14,07,25_1.csv"

# Input time interval as a number with no quotation marks
TimeInterval <- 3

# Input sensor names in the form c("name for sensor 1", "name for sensor 2", ...)
SensorNames <- c("CFP", "RFP")

# Input ROI names in the form c("name for ROI 1", "name for ROI 2", ...)
ROINames <- c("Airpore Old 1", "Airpore Old 2", "Airpore Old 3", "Airpore Medium 1", "Airpore Medium 2", "Background")



##################################################################
## functions for loading and Wrangling Data, do not touch!
# loading your dataset
if (endsWith(FileName, ".csv") != TRUE){
  message('You must enter a filename in the form "file name.csv"', "\n")
} else{
  Input <- read.csv(here("Input", FileName))
  # creating Dataset from your Inputted information and saving it to Output/Data
  OGData <- DataExtending(FileName, Input, TimeInterval, SensorNames, ROINames)
}
```

## Data Wrangling

This changes the Data into a format which is more useful for analysis. As well as calculating the ratio *(if the calcium and background channel number have been added correctly)* and a normalised this ratio using the background ROI *(if a background ROI has been correctly identified)*.

```{r}
#| label: Wrangling
## Inputting Channel information
# Input Calcium channel number with no quotation marks
CalciumChannel <- 1

# Input Background channel number with no quotation marks
BackgroundChannel <- 2

## Inputting ROI information
# Input background ROI number with no quotation marks
BackgroundROI <- 6


##################################################################
## functions for Wrangling Data, do not touch!
# Creating the new Dataset
Data <- DataWrangling(OGData, CalciumChannel, BackgroundChannel, BackgroundROI, FileName)
```

# Octave integration

This is for use with the previously made code for Octave. To use, please install Octave from this link and follow the Octave section of the README file:

Octave for Mac: <https://octave-app.org/Developer-Downloads.html> Octave for Windows: <https://www.gnu.org/software/octave/download.html#ms-windows>

```{r}
#| label: Creation of Octave File
OctaveFile(Data, FileName)
```

# Visualisation

## All

```{r}
LineGraph(Data, FileName)
```

## Individual cells

```{r}
#MultiPlot(Data, FileName)
for(i in 1:as.integer(max(Data$ROI))){
    LineGraph(filter(Data, ROI == i), FileName, i)
}
```
