---
---
title: "2T2C"
author: "Ted (Edward) Aplin"
format: html
editor: visual
---

# Initialisation

Make sure you have run Initialisation.R before using this file for the first time, if any packages fail to load, then run it again.

```{r}
#| label: Packages
# loading packages
library(tidyverse)
library(here)
library(png)
library(svglite)
library(pals)
library(ggbeeswarm)

# loading personal functions
source(here("Functions", "Functions for 2T2C.R"))
```

# Data preparation

## loading

Imports an Input data file, converts it into an R friendly format and gives the option of adding extra Data.

Place your data into the "Input" folder then enter in the following details here, by default it is filled with demo data. **If there is any information you would not like to enter, write 0.**

-   File name including extension (.csv)

-   The time interval between frames in Seconds

-   The number of the channel that contains the calcium data

-   The number of the channel that contains the background data

-   the names you would like to give to your sensors

-   the names you would like to give your ROIs

```{r}
#| label: Data loading and manual data input
# Input file name in the format "file name.csv" MUST BE ENTERED
InputFileName <- "Test WT 1.csv"

# Input time interval in seconds as a number with no quotation marks
TimeInterval <- 7

# Input sensor names in the form c("name for sensor 1", "name for sensor 2", ...)
SensorNames <- c("Sensor 1", "Sensor 2")

# Input ROI names in the form c("name for ROI 1", "name for ROI 2", ...)
ROINames <- c("ROI1", "ROI2", "ROI3", "ROI4", "ROI5", "Background1")



##################################################################
## functions for loading and Extending Data, do not touch!
# creating Dataset from your Inputted information and saving it to Output/Data
OGData <- DataExtending(InputFileName, TimeInterval, SensorNames, ROINames)
```

## Data Wrangling

This changes the Data into a format which is more useful for analysis. As well as calculating the ratio *(if the calcium and background channel number have been added correctly)* and a normalised this ratio using the background ROI *(if a background ROI has been correctly identified)*.

```{r}
#| label: Wrangling
## Inputting Channel information
# Input Calcium channel number with no quotation marks
CalciumChannel <- 1

# Input Background channel number with no quotation marks
BackgroundChannel <- 2

## Inputting ROI information
# Input background ROI number with no quotation marks, if you want to add multiple do it in the form c(1, 2, ...)
BackgroundROI <- 6


##################################################################
## functions for Wrangling Data, do not touch!
# Creating the new Dataset
Data <- DataWrangling(OGData, CalciumChannel, BackgroundChannel, BackgroundROI, InputFileName)
```

# Alternative file format

This section creates a differently formatted file with the data that may work better in some pipelines.

The data is formatted with the first column as the time data, then the following columns contain data from each ROI like this:

![](images/clipboard-2899195975.png)

```{r}
#| label: Creation of alternative format file
##################################################################
## functions for Changing Data format, do not touch!
# Creating the new Dataset
AlternativeFile(Data, InputFileName)
```

# Visualisation

Creates graphs from the data set input. Makes 1 graph with all data shown together, then a separate graph for each individual ROI.

You can set the y limit manually so it can be compared to other graphs well. If you set it to 0 then the Y limit is set automatically. The automatic Y limit takes the largest value from the entire data-set, and then sets the Y limit for all graphs from the same data-set to be the same so they can be compared.

The resolution input sets the pixel count for the X and Y dimensions of the PNG output. The DPI sets the scale of the contents of the image e.g. thickness of lines, size of text etc. I would recommend c(2000,1000,200).

This also outputs each graph as an SVG as well as a PNG, I have calculations with translate the sizes of PNG to SVG, so the SVG will have the exact same aspect ratio and scaling of contents as the PNG.

```{r}
# enter the name you would like the graphs to have, ensure to put it in quotation marks
GraphName <- "Testing Graph"

# enter the maximum Y value for the graph as a number with no quotation marks, if you want this to be set automatically put 0
YLimit <- 0

# enter the resoltuion of the graph in the form c(X, Y, DPI)
Resolution <- c(2000,1000,200)



##################################################################
## functions for creating graphs, do not touch!
# Creating a graph of all data
YLimitAuto <- LineGraph(Data, InputFileName, GraphName, YLimit, Resolution)
# creating indivual graphs
for(i in 1:as.integer(max(Data$ROI))){
  GraphData <- filter(Data, ROI == i)
  OutputName <- paste0(GraphName, " - ", GraphData$ROI_Name[1])
  LineGraph(GraphData, InputFileName, OutputName, 
            YLimitAuto, Resolution,  i)
}
```

# Batch processes

These processes have certain pre-requisites:

-   You have run all data that you would like to use through [loading] and [Data Wrangling]

-   Place all of the -Wrangling files into Input/Batch

-   all files from a certain sample (e.g. Wild type, mutant, treatment, etc.) share a common string of characters in their filenames

## Batch Data Loading

In this Block you can combine together multiple files into one larger data-set. Ensure that the files are in the format of the "-Wrangled.csv" output files.

```{r}
#| label: Batch Data Loading

# enter the name that you want to give the combined data-set, make sure it ends in .csv and is surrounded by quotation marks
FileName <- "Test Batch Dataset.csv"

# Enter the name of each type of sample as it appears in the filenames, in the format C("sample 1", "sample 2", ...)
SampleNames <- c("WT", "Mut")

# Enter the name that you would like to display for each type of sample, in the format C("sample 1", "sample 2", ...)
# ensure that they are in the same order as above
# if you want to use the names as they appear in the filenames then just put 0
DisplayNames <- 0



##################################################################
## functions for creating Dataset, do not touch!
# Creating dataset from supplied files
BatchData <- BatchDataset(SampleNames, DisplayNames, FileName)
```

## Load a different file

If you place a pre-made Batch data-set in the Input folder then you can load it here.

If it returns "no such file or directory" or "cannot open the connection" then your file is not in the Input folder, or you have misspelled it.

```{r}

# enter in the name of the batch data-set you want to import, ensure that it ends in .csv and is surrounded by quotation marks
FileName <- "Test Batch Dataset.csv"



##################################################################
## functions for loading Dataset, do not touch!
# Creating dataset from supplied files
BatchData <- read.csv(here("Input", FileName))
```

## Comparing background

This script compares the average background value of samples from different types, e.g. WT and mutant.

It displays this as a box and whisker plot, as well as a table showing the average value for each sample.

ensure that you have either prepared a batch data set or loaded a prepared batch data-set before using it

```{r}
##################################################################
## functions for creating Dataset, do not touch!
# Creating dataset from supplied files
Data <- Boxplot(BatchData)
print(Data)
```
