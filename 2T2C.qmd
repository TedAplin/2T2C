---
---
title: "2T2C"
author: "Ted Aplin"
format: html
editor: visual
---

# Initialisation

Make sure you have run Initialisation.R before using this file for the first time, if any packages fail to load, then run it again.

```{r}
#| label: Packages
# loading packages
library(tidyverse)
library(here)
library(png)
library(svglite)
library(pals)
library(ggbeeswarm)
# library(doParallel)
# closeAllConnections()
# registerDoParallel(cores=16)

# loading personal functions
source(here("Functions", "Functions for 2T2C.R"))
```

# Data preparation

## loading

Place your data into the "Input" folder then enter in the following details here, a demo from the test data-set is here by default. **If there is any information you would not like to enter, write 0.**

-   File name including extension (.csv)

-   The time interval between frames in Seconds

-   The number of the channel that contains the calcium data

-   The number of the channel that contains the background data

-   the names you would like to give to your sensors

-   the names you would like to give your ROIs

```{r}
#| label: Data loading and manual data input
# Input file name in the format "file name.csv" MUST BE ENTERED
InputFileName <- "MAX_CNGC 1 2158-6 14,07,25_1.csv"

# Input time interval as a number with no quotation marks
TimeInterval <- 3

# Input sensor names in the form c("name for sensor 1", "name for sensor 2", ...)
SensorNames <- c("GFP", "RFP")

# Input ROI names in the form c("name for ROI 1", "name for ROI 2", ...)
ROINames <- c("Airpore Old 1", "Airpore Old 2", "Airpore Old 3", "Airpore Medium 1", "Airpore Medium 2",  "background")



##################################################################
## functions for loading and Extending Data, do not touch!
# creating Dataset from your Inputted information and saving it to Output/Data
OGData <- DataExtending(InputFileName, TimeInterval, SensorNames, ROINames)
```

## Data Wrangling

This changes the Data into a format which is more useful for analysis. As well as calculating the ratio *(if the calcium and background channel number have been added correctly)* and a normalised this ratio using the background ROI *(if a background ROI has been correctly identified)*.

```{r}
#| label: Wrangling
## Inputting Channel information
# Input Calcium channel number with no quotation marks
CalciumChannel <- 1

# Input Background channel number with no quotation marks
BackgroundChannel <- 2

## Inputting ROI information
# Input background ROI number with no quotation marks, if you want to add multiple do it in the form c(1, 2, ...)
BackgroundROI <- 6


##################################################################
## functions for Wrangling Data, do not touch!
# Creating the new Dataset
Data <- DataWrangling(OGData, CalciumChannel, BackgroundChannel, BackgroundROI, InputFileName)
```

# Octave integration

This is for use with the previously made code for Octave. To use, please install Octave from this link and follow the Octave section of the README file:

Octave for Mac: <https://octave-app.org/Developer-Downloads.html> Octave for Windows: <https://www.gnu.org/software/octave/download.html#ms-windows>

```{r}
#| label: Creation of Octave File
OctaveFile(Data, InputFileName)
```

# Visualisation

set Ylimit to 0 if you want it to be set automatically based on the largest value in your dataset.

```{r}
GraphName <- "WT-8"

# enter the maximum Y value for the graph, if you want this to be set automatically put 0
YLimit <- 0.35

# enter the resoltuion of the graph in the form c(X, y, DPI)
Resolution <- c(2000,1000,200)



##################################################################
## functions for creating graphs, do not touch!
# Creating a graph of all data
YLimitAuto <- LineGraph(Data, InputFileName, GraphName, YLimit, Resolution)

# creating indivual graphs
for(i in 1:as.integer(max(Data$ROI))){
  GraphData <- filter(Data, ROI == i)
  OutputName <- paste0(GraphName, " - ", GraphData$ROIName[1])
  LineGraph(GraphData, InputFileName, OutputName, 
            YLimitAuto, Resolution,  i)
}
```

# Patch processes

These processes have certain pre-requisites:

-   You have run all data that you would like to use through [loading] and [Data Wrangling]

-   all of their files are in Input/Batch

-   all files from a certain sample (e.g. Wild type, mutant, treatment, etc.) share a common string of characters in their filenames

## Batch Data Loading

In this

```{r}
#| label: Batch Data Loading

FileName <- "WT vs cngc3 airpore calcium signalling 12,08,25.csv"

# Enter the name of each sample as it appears in the filenames, in the format C("sample 1", "sample 2", ...)
SampleNames <- c("WT", "CNGC")

# Enter the name that you would like to display for each sample, in the format C("sample 1", "sample 2", ...)
# ensure that they are in the same order as above
# if you want to use SampleNames as DisplayNames then you can put in 0
DisplayNames <- c("WT","cngc3")



##################################################################
## functions for creating Dataset, do not touch!
# Creating dataset from supplied files
BatchData <- BatchDataset(SampleNames, DisplayNames, FileName)
```

## Load a different file

```{r}
```

## Comparing background

```{r}
Data <- Boxplot(BatchData)
```
